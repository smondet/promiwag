
To do:


* Promiwag_meta_packet: 
  - TCP packets
  - Stage_2_stiel -> Stage_3_C

* Promiwag_stiel.Verify:
  - recursivity for variables
  - variables defined twice
  - retrive checks to do on buffer accesses, and divisions by zero

* Promiwag_stiel: Integer management
  - module SafeInt64, with all bounds checkings
  - check that ints are positive

* Promiwag_stiel: Language
  - add the "Exception" int,bool expressions (?)
  - pure functions and call in expressions
  - procedures  and call statement
  - external procedures, defined with functions to transform parameters
  - Write_{int,...}_to_buffer i.e. a controled/typed asignement of *buffer.
  - put types in epxressions?
  - add log_printf statement

* Promiwag_stiel: Future
  - full interpreter
  - export to Coq or ?
  - float expressions

* use Format, or EasyFormat for printing C and Stiel

+ a while+switch manager for parsing encapsulations of packets

? Promiwag_platform: Generate an "inspector.c" piece of code which
  retrives endianism, sizeof's, etc ... as OCaml code ...

