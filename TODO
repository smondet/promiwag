
To do:

BUGS:

- check '<=' Vs '<' (bug with TCP only-ack packets "20 < 20")
(seems there with tmp_data/pcap_files/fuzz-2010-08-10-14745.pcap )

FEATURES:

* Automata_generator:
  ? 'more lazy' binary tree of (condition, statement_then), with special
    case for unknown protocols. Then balance the binary tree and
    generate if-then-else's.
  - separate protocol description from compilation (e.g. atomic_transition)
    => module Meta_protocol and Protocol_automaton_generator
    or Meta_packet + Meta_protocol  Packet_parsing Protocol_automaton (?)


* Promiwag_meta_packet, Promiwag_protocol_stack:
  - like DHCP options (like a null-terminated list) and like DNS arrays
    -> those are state-related, when a state will be implemented
       the automatat should be able to add its requests to the data-base
       and go deeper
    -> when the state related part will be implemented
       an API sould be defined for packet + transitions + state dependency
  - GRE's checksum sounds a bit hackish...
 

* Promiwag_stiel.Verify:
  - recursivity for variables (that's an environment check)
  - variables defined twice
  - retrive checks to do on buffer accesses, and divisions by zero
  - typing of variable assignments (follow types of declared
    variables, and check assignments)
  - look for potential proving errors before sending to the prover

* Promiwag_stiel: Integer management
  - module SafeInt64, with all bounds checkings
  - check that ints are positive

* Promiwag_stiel: Language
  ? add the "Exception" int,bool expressions (?)
  - pure functions and call in expressions
  - procedures  and call statement
  - external procedures, defined with functions to transform parameters
  - Write_{int,...}_to_buffer i.e. a controled/typed asignement of *buffer.
  - big2little and little2big
    http://www.codeproject.com/KB/cpp/endianness.aspx
    http://msdn.microsoft.com/en-us/library/2bxt6kc4.aspx
    http://www.gsp.com/cgi-bin/man.cgi?section=7&topic=operator
  - Add the "list" statement
    -> support for transformations e.g. 
    t = k * 2 + k * 2 --> decl tmp; tmp = k * 2; t = @ * tmp;

* Promiwag_stiel: Future
  - full interpreter
  - float expressions

* use Format, or EasyFormat for printing C and Stiel


? Promiwag_platform: Generate an "inspector.c" piece of code which
  retrives endianism, sizeof's, etc ... as OCaml code ...

